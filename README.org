#+TITLE: Skeletor
#+AUTHOR: Chris Barrett

Skeletor allows you to easily create project templates in Emacs. It comes with a
number of predefined templates and allows you to easily create your own.

* Creating Projects
Use =M-x create-project= to create a new project based on an existing template.
You will be guided through any configuration needed.

By default, new projects are created in =~/Projects=. Customise
=skel-project-directory= to change this.

* Defining Project Templates
** Structure
There are two simple parts to defining a new project:

1. Create a template directory in the =skel-user-directory=, containing any
   files and directories you'd like.
2. Use the =define-project-skeleton= macro to configure how the project template
   will be created. Here's a simplified version of the elisp

For example, here's the directory structure of the elisp-package skeleton:
#+begin_example
elisp-package/
|-- CONTRIBUTING.org
|-- Cask
|-- Makefile
|-- README.org
|-- __PROJECT-NAME__.el
`-- doc
    `-- __PROJECT-NAME__.org
#+end_example

And here's the corresponding definition:
#+begin_src elisp
(define-project-skeleton "elisp-package"
  :default-license (rx bol "gpl")
  :replacements '(("__DESCRIPTION__" . (lambda ()
                                         (read-string "Description: "))))
  :after-creation
  (lambda (dir)
    (async-shell-command
     (format "cd %s && make env" (shell-quote-argument dir))
     skel--shell-buffer-name)))
#+end_src

** Token Expansion

Filenames and file contents may contain special tokens that will be expanded
when the project is created. For example, a template file with the contents:

#+begin_example
Title: Secret Plans
Project: __PROJECT-NAME__
Author: __USER-NAME__
#+end_example

could be instantiated as the following:

#+begin_example
Title: Secret Plans
Project: Capture Battle-Cat
Author: Skeletor
#+end_example

The variable =skel-global-replacements= defines the replacements available in
all project templates, and each template may declare its own special replacements.

* Contributing
Yes, please do! More project types are especially welcome. Read over
CONTRIBUTING for guidelines.

* License
See COPYING. Copyright (c) 2013 Chris Barrett.
