\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename skeletor.info
@settitle Skeletor
@documentencoding UTF-8

@documentlanguage en


@c Version and Contact Info
@set AUTHOR Chris Barrett

The Skeletor manual
@c %**end of header
@finalout


@copying
@end copying


@dircategory Emacs
@direntry
* Skeletor: (skeletor).         Provides project templates for Emacs
@end direntry


@titlepage
@title Skeletor

@subtitle Powerful project templates for Emacs
@author Chris Barrett

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top Skeletor Manual
@insertcopying
@end ifnottex

@menu
* Overview::                    
* Installation::                
* Usage::                       
* Extending::                   
* Acknowledgements::            
* GNU Free Documentation License::  

@detailmenu
 --- The Detailed Node Listing ---

Extending

* Project Skeletons::           
* Substitutions::               
* External Tools::              

Project Skeletons

* Creating a Skeleton Directory::  
* Configuring the Skeleton::    

Substitutions

* Introduction::                
* Specifying Substitutions::    
* Embedded Elisp::              

@end detailmenu
@end menu




@node Overview
@chapter Overview
Skeletor provides project templates for Emacs. It also automates the mundane
parts of setting up a new project like version control, licenses and tooling.

Skeletor comes with predefined project types so it is useful out-of-the-box:

@itemize
@item 
Clojure

@item 
Elisp

@item 
Haskell

@item 
Python

@item 
Ruby

@end itemize

Skeletor is designed to be extensible so you can create your own templates.

@node Installation
@chapter Installation
You will need Emacs 24+, @verb{~make~} and @uref{https://github.com/cask/cask,Cask} to build the project.

@example
cd
git clone git@@github.com:chrisbarrett/skeletor.el.git
cd skeletor
make && make install
@end example

@node Usage
@chapter Usage
Use @verb{~M-x skeletor-create-project~} to create a new project based on an existing template.
You will be guided through any configuration needed.

By default, new projects are created in @verb{,~/Projects,}. Customise
@verb{~skeletor-project-directory~} to change this.

@node Extending
@chapter Extending

Skeletor allows you to define new types of projects. You can either create a
project template, called a @emph{skeleton}, or you can use an external tool to create
the project and use Skeletor to perform additional configuration.


@menu
* Project Skeletons::           
* Substitutions::               
* External Tools::              
@end menu

@node Project Skeletons
@section Project Skeletons
Project skeletons are templates for constructing new projects. The following
discussion will use the terms @emph{skeleton} and @emph{template} interchangeably.

There are two parts to defining a new project skeleton, discussed in the
following sections.


@menu
* Creating a Skeleton Directory::  
* Configuring the Skeleton::    
@end menu

@node Creating a Skeleton Directory
@subsection Creating a Skeleton Directory
Skeletor uses physical files and directories to represent project templates.
When you create a project, Skeletor will copy the template directory and apply
certain transformations.

To create a template, make a new directory in @verb{~skeletor-user-directory~}. It can
contain any files and directories you'd like.

It is a good idea to add any files needed for distributing the project source.
Most of the templates that ship with Skeletor include a Makefile, @verb{~.gitignore~},
README and contributing guidelines.

Below is an example project skeleton structure for Emacs Lisp:

@example
my-elisp-package/
|-- .gitignore
|-- CONTRIBUTING.md
|-- Cask
|-- Makefile
|-- README.md
|-- __PROJECT-NAME__.el
`-- doc
    `-- __PROJECT-NAME__.org
@end example

Note that Skeletor will handle the creation of a license file itself, so you
should not add one to your skeleton.

@node Configuring the Skeleton
@subsection Configuring the Skeleton
Once you have created a project skeleton, use the @verb{~skeletor-define-template~}
macro to configure how the project template will be created.

@enumerate
@item
Basic Configuration

In the simplest case, you just need to tell Skeletor the name of the template:

@lisp
(skeletor-define-template "my-elisp-package")
@end lisp

This will add @verb{~my-elisp-package~} to the list of available projects. You can now
create an instance by calling @verb{~M-x skeletor-create-project my-elisp-package~}. Skeletor
will manage the creation of the project, prompt you to choose a license, and
initialise a git repository at the root of the project.

@item
Titles

You can set a custom title for your project type using the @verb{~:title~} keyword
parameter.

@lisp
(skeletor-define-template "my-elisp-package"
  :title "My Elisp Package")
@end lisp

The title is the string that represents the project in the @verb{~skeletor-create-project~}
prompt.

@item
Default Licenses

Skeletor will prompt you to select a license when you create a project. Some
 communities favour a particular license, so Skeletor allows you to pre-populate
 the license prompt.

For example, Elisp projects are generally licensed under GPL:

@lisp
(skeletor-define-template "my-elisp-package"
  ; ...
  :default-license (rx bol "gpl"))
@end lisp

Note that the argument to @verb{~:default-license~} is a regular expression so you
don't have to specify the license name precisely.

@item
Custom Actions

You can use the @verb{~:after-creation~} keyword parameter to perform additional
actions after a project has been created. It takes a single-parameter function
taking the path to the newly-created project.

For example, the Elisp project runs a Makefile task in the background to
configure the development environment:

@lisp
(skeletor-define-template "elisp-package"
  ; ...
  :after-creation
  (lambda (dir)
    (skeletor-async-shell-command dir "make env")))
@end lisp

You can do anything you want in the @verb{~after-creation~} command, but it is a good
idea to automate as much of the environment setup as possible using a makefile
or shell script. This will help other developers who want to contribute to your
project.

@item
External Tools

Sometimes you need to use an external tool to perform part of the project
configuration. Skeletor provides the @verb{~skeletor-shell-command~} and
@verb{~skeletor-async-shell-command~} functions for this purpose. These functions output to
special buffers and assert that their shell commands were successful.

@lisp
(skeletor-define-template "elisp-package"
  ; ...
  :after-creation
  (lambda (dir)
    (skeletor-async-shell-command dir "make env")))
@end lisp

Because such external tools may not be installed on every system, Skeletor
provides a way to declare these requirements up-front using the
@verb{~:requires-executables~} keyword parameter. It takes an alist of @verb{~(PROGRAM .
URL)~}, where @verb{~URL~} is a link to a project page or download instructions.

For example, the @verb{~elisp-package~} template uses @verb{~make~} and @verb{~Cask~} to bootstrap
the development environment and declares its dependency on these programs:

@lisp
(skeletor-define-template "elisp-package"
  ; ...
  :requires-executables '(("make" . "http://www.gnu.org/software/make/")
			  ("cask" . "https://github.com/cask/cask")))
@end lisp

Skeletor will search for these two programs when creating an instance of the
template. It will display a help window with download links if either of them
cannot be found.
@end enumerate

@node Substitutions
@section Substitutions
Skeletor can perform text substitutions when it creates new projects. This makes
it possible to refer to the name of the project, add time-stamps and customise
the contents of files according to user input when a project is created.


@menu
* Introduction::                
* Specifying Substitutions::    
* Embedded Elisp::              
@end menu

@node Introduction
@subsection Introduction

The @verb{~__PROJECT-NAME__~} substitution is a useful example. Given the following
skeleton,

@example
my-elisp-package/
|-- __PROJECT-NAME__.el
`-- doc
    `-- __PROJECT-NAME__.org
@end example

the project name entered by the user will be used to name the files. Given a
project named @emph{foo}, Skeletor would instantiate this skeleton as:

@example
foo/
|-- foo.el
`-- doc
    `-- foo.org
@end example

Substitutions are also applied to the text inside files. A file with the
contents,

@example
Name: __USER-NAME__
Project: __PROJECT-NAME__
@end example

might be expanded as:

@example
Name: Jane Coder
Project: foo
@end example

@node Specifying Substitutions
@subsection Specifying Substitutions

The @verb{~skeletor-global-substitutions~} variable defines the substitutions available to
all skeletons. It is an alist, where each element is a cons of @verb{~(STRING .
REPLACEMENT)~}. @verb{~REPLACEMENT~} should be a string literal, a variable name, a
function name, or a lambda expression.

You can add your own items to @verb{~skel-globl-substitutions~}. For example:

@lisp
(add-to-list 'skeletor-global-substitutions
	     '("__ORGANISATION__" "Masters of the Universe"))

(add-to-list 'skeletor-global-substitutions
	     (cons "__HOME__" (getenv "HOME")))

(add-to-list 'skeletor-global-substitutions
	     (cons "__TIME__" (lambda () (format-time-string "%c"))))
@end lisp

You can also define substitutions available to individual skeletons:

@lisp
(skeletor-define-template "my-package"
  :substitutions
  '(("__DESCRIPTION__" . (lambda () (read-string "Description: ")))))
@end lisp

This will prompt you to enter a description when creating an instance of this
project.

@node Embedded Elisp
@subsection Embedded Elisp
Template files may contain embedded Elisp expressions that will be evaluated
when the project is created. The expression will be replaced by its result. The
syntax is @verb{~__(expression)__~}.

For example, a template file with the contents:

@example
Current Time: __(format-time-string "%c")__
Current OS:   __(shell-command-to-string "uname")__
@end example

could be expanded to:

@example
Current Time: Thu Dec 19 16:14:35 2013
Current OS:   Darwin
@end example

@node External Tools
@section External Tools
Some communities have well-established tools for creating projects from
templates. Skeletor may still be used to orchestrate these tools and perform
additional setup steps.

Skeletor provides the @verb{~skeletor-define-constructor~} macro for this purpose. It
is similar to @verb{~skeletor-define-template~}, but it requires you supply a function
that creates the project structure itself.

For example, @uref{http://bundler.io,Bundler} is a popular tool in the Ruby community that can create new
Ruby projects. Skeletor provides the following binding:

@lisp
(skeletor-define-constructor "Ruby Gem"
  :requires-executables '(("bundle" . "http://bundler.io"))
  :no-license? t

  :initialise
  (lambda (name project-dir)
    (skeletor-shell-command
     project-dir (format "bundle gem %s" (shell-quote-argument name))))

  :after-creation
  (lambda (dir)
    (when (and (executable-find "rspec")
	       (y-or-n-p "Create RSpec test suite? "))
      (skeletor-shell-command dir "rspec --init"))))
@end lisp

Skeletor will use @verb{~bundle~} to create the project structure, offer to create an
RSpec test suite, then add everything to version control.

@node Acknowledgements
@chapter Acknowledgements
Skeletor is based on @uref{https://twitter.com/magnars,@@magnars}' Project Archetypes--one of many cool features of
his @uref{https://github.com/magnars/.emacs.d,.emacs.d}. This, and other goodies, are covered in @uref{http://sachachua.com/blog/2013/11/emacs-chat-magnar-sveen-emacs-rocks/,this chat session} with
Sacha Chua.

Muchas gracias to @uref{https://twitter.com/magnars,@@magnars} and @uref{https://twitter.com/rejeep,@@rejeep} for their excellent libraries and
tooling. You guys are stars!

@node GNU Free Documentation License
@chapter GNU Free Documentation License

@c Emacs 24.3.1 (Org mode 8.2.4)

@bye